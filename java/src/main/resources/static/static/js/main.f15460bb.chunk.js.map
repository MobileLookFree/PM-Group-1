{"version":3,"sources":["components/JournalTable.jsx","Services/Request.js","components/App.jsx","serviceWorker.js","index.js"],"names":["JournalTable","react_default","a","createElement","Table","bordered","this","props","students","map","student","index","name","markPrIS","markSII","Component","Request","getStudents","fetch","then","res","json","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","activeGroup","_this2","setState","_this3","className","components_JournalTable","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRA6BeA,mLAxBP,OAAOC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,UAAQ,GAClBJ,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,kCAGJF,EAAAC,EAAAC,cAAA,aACCG,KAAKC,MAAMC,SAASC,IAAI,SAACC,EAASC,GAC/B,OAAOV,EAAAC,EAAAC,cAAA,UACHF,EAAAC,EAAAC,cAAA,UAAKQ,EAAQ,GACbV,EAAAC,EAAAC,cAAA,UAAKO,EAAQE,MACbX,EAAAC,EAAAC,cAAA,UAAKO,EAAQG,UACbZ,EAAAC,EAAAC,cAAA,UAAKO,EAAQI,qBAjBNC,aCGZC,EANC,CACZC,YADY,WAEX,OAAOC,MAAM,gBAAgBC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SCoEnCC,cA9Cb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAlB,KAAAgB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAlB,KAAAkB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAtB,QACKuB,MAAQ,CACXC,YAAa,EACbtB,SAAU,MAJAe,mFAQM,IAAAQ,EAAAzB,KAClBU,EAAQC,cAAcE,KAAK,SAACX,GAC1BuB,EAAKC,SAAS,CAAExB,SAAUA,uCAIrB,IAAAyB,EAAA3B,KACP,OACEL,EAAAC,EAAAC,cAAA,OAAK+B,UAAU,OACZ5B,KAAKuB,MAAMrB,SACVP,EAAAC,EAAAC,cAACgC,EAAD,CAAc3B,SAAUF,KAAKuB,MAAMrB,SAASF,KAAKuB,MAAMC,eACrD,KACJ7B,EAAAC,EAAAC,cAAA,UACEiC,QAAS,WACPH,EAAKD,SAAS,CAAEF,YAAa,MAFjC,0CAOA7B,EAAAC,EAAAC,cAAA,UACEiC,QAAS,WACPH,EAAKD,SAAS,CAAEF,YAAa,MAFjC,0CAOA7B,EAAAC,EAAAC,cAAA,UACEiC,QAAS,WACPH,EAAKD,SAAS,CAAEF,YAAa,MAFjC,kDAnCUf,aCXEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.f15460bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Table} from 'react-bootstrap';\n\nclass JournalTable extends Component {\n    render() {\n        return <Table bordered>\n            <thead>\n            <tr>\n                <th>#</th>\n                <th>ФИО</th>\n                <th>ПрИС</th>\n                <th>СИИ</th>\n            </tr>\n            </thead>\n            <tbody>\n            {this.props.students.map((student, index) => {\n                return <tr>\n                    <td>{index + 1}</td>\n                    <td>{student.name}</td>\n                    <td>{student.markPrIS}</td>\n                    <td>{student.markSII}</td>\n                </tr>\n            })}\n            </tbody>\n\n        </Table>\n    }\n}\n\nexport default JournalTable;","const Request = {\n    getStudents() {\n    \treturn fetch(\"/getStudents\").then(res => res.json);\n    }\n};\n\nexport default Request\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport JournalTable from './JournalTable';\nimport Request from '../Services/Request';\n\n/*\nconst students = [\n  [\n    { name: 'Иванов Иван Иванович', markPrIS: 5, markSII: 4 },\n    { name: 'Петров Пётр Петрович', markPrIS: 3, markSII: 2 }\n  ],\n  [\n    { name: 'Валиева Лидия Павловна', markPrIS: 3, markSII: 5 },\n    { name: 'Илюшин Игорь Витальевич', markPrIS: 5, markSII: 5 }\n  ],\n  [\n    { name: 'Голутвин Семён Юрьевич', markPrIS: 4, markSII: 2 },\n    { name: 'Сёмина Анна Николаевна', markPrIS: 3, markSII: 5 }\n  ]\n];\n*/\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      activeGroup: 0,\n      students: null\n    };\n  }\n\n  componentDidMount() {\n    Request.getStudents().then((students) => {\n      this.setState({ students: students });\n    });\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        {this.state.students ? (\n          <JournalTable students={this.state.students[this.state.activeGroup]} />\n        ) : null}\n        <button\n          onClick={() => {\n            this.setState({ activeGroup: 0 });\n          }}\n        >\n          Группа 1\n        </button>\n        <button\n          onClick={() => {\n            this.setState({ activeGroup: 1 });\n          }}\n        >\n          Группа 2\n        </button>\n        <button\n          onClick={() => {\n            this.setState({ activeGroup: 2 });\n          }}\n        >\n          Группа 3\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}